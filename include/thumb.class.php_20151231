<?php
class Thumb {
	/**
	 * 以最大宽度缩放图像
	 *
	 * @param string $im
	 *        	图像元数据
	 * @param float $w
	 *        	最大宽度
	 */
	static function maxWidth($im, $w, $Type) {
		
		if (empty ( $im ) || empty ( $w ) || ! is_numeric ( $w )) {
			throw new Exception ( "缺少必须的参数" );
		}
		$image = imagecreatefromstring ( $im ); // 创建图像
		                                        
		// $bg=imagecolorallocate($image,200,40,120);
		list ( $im_w, $im_h ) = self::getsize ( $image ); // 获取图像宽高
		if ($im_w > $w) {
			$new_w = $w;
			$new_h = $w / $im_w * $im_h;
		} else {
			$new_w = $im_w;
			$new_h = $im_h;
		}
		
		if (function_exists ( "imagecopyresampled" )) {
			$dst_im = imagecreatetruecolor ( $new_w, $new_h );
			
			imagealphablending($dst_im, false);
			imagesavealpha($dst_im, true);
			imagecopyresampled ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
			
		} else {
			$dst_im = imagecreate ( $new_w, $new_h );
			imagealphablending($dst_im, false);
			imagesavealpha($dst_im, true);
			imagecopyresized ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
		}
		
		header ( "content-type:$Type" );
		switch ($Type) {
			case "image/jpeg" :
				imagejpeg ( $dst_im, null, 100 );
				break;
			case "image/png" :
				
				imagepng ( $dst_im);
				break;
			case "image/gif" :
				$dst_im = imagecreate ( $new_w, $new_h );
			
				$bgcolor=ImageColorAllocate($dst_im,0,0,0);
				ImageColorTransparent($dst_im,$bgcolor);
				imagecopyresized ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
				
				imagegif ( $dst_im );
				break;
		}
		
		imagedestroy ( $dst_im );
		imagedestroy ( $image );
	}
	
	/**
	 * 以最大高度缩放图像
	 *
	 * @param string $im
	 *        	图像元数据
	 * @param float $w
	 *        	最大高度
	 */
	static function maxHeight($im, $h, $Type) {
		if (empty ( $im ) || empty ( $h ) || ! is_numeric ( $h )) {
			throw new Exception ( "缺少必须的参数" );
		}
		$image = imagecreatefromstring ( $im ); // 创建图像
		list ( $im_w, $im_h ) = self::getsize ( $im ); // 获取图像宽高
		if ($im_h > $h) {
			$new_w = $h / $im_h * $im_w;
			$new_h = $h;
		} else {
			$new_w = $im_w;
			$new_h = $im_h;
		}
		if (function_exists ( "imagecopyresampled" )) {
			$dst_im = imagecreatetruecolor ( $new_w, $new_h );
			imagealphablending($dst_im, false);
			imagesavealpha($dst_im, true);
			imagecopyresampled ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
		} else {
			$dst_im = imagecreate ( $new_w, $new_h );
			imagealphablending($dst_im, false);
			imagesavealpha($dst_im, true);
			imagecopyresized ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
		}
		header ( "content-type:$Type" );
		switch ($Type) {
			case "image/jpeg" :
				imagejpeg ( $dst_im, null, 100 );
				break;
			case "image/png" :
				imagepng ( $dst_im );
				break;
			case "image/gif" :
				$dst_im = imagecreate ( $new_w, $new_h );
			
				$bgcolor=ImageColorAllocate($dst_im,0,0,0);
				ImageColorTransparent($dst_im,$bgcolor);
				imagecopyresized ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
				imagegif ( $dst_im );
				break;
		}
		imagedestroy ( $dst_im );
		imagedestroy ( $image );
	}
	
	/**
	 * 生成固定大小的图像并按比例缩放
	 *
	 * @param string $im
	 *        	图像元数据
	 * @param float $w
	 *        	最大宽度
	 * @param float $h
	 *        	最大高度
	 */
	static function fixed($im, $w, $h, $Type) {
		if (empty ( $im ) || empty ( $w ) || empty ( $h ) || ! is_numeric ( $w ) || ! is_numeric ( $h )) {
			throw new Exception ( "缺少必须的参数" );
		}
		$image = imagecreatefromstring ( $im ); // 创建图像
		list ( $im_w, $im_h ) = self::getsize ( $im ); // 获取图像宽高
		if ($im_w > $im_h || $w < $h) {
			$new_h = intval ( ($w / $im_w) * $im_h );
			$new_w = $w;
		} else {
			$new_h = $h;
			$new_w = intval ( ($h / $im_h) * $im_w );
		}
		// echo "$im_w x $im_h <br/> $new_w x $new_h <br/> $x $y";exit;
		// 开始创建缩放后的图像
		if (function_exists ( "imagecopyresampled" )) {
			$dst_im = imagecreatetruecolor ( $new_w, $new_h );
			imagealphablending($dst_im, false);
			imagesavealpha($dst_im, true);
			imagecopyresampled ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
		} else {
			$dst_im = imagecreate ( $new_w, $new_h );
			imagealphablending($dst_im, false);
			imagesavealpha($dst_im, true);
			imagecopyresized ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
		}
		header ( "content-type:$Type" );
		switch ($Type) {
			case "image/jpeg" :
				imagejpeg ( $dst_im, null, 100 );
				break;
			case "image/png" :
				imagepng ( $dst_im );
				break;
			case "image/gif" :
				$dst_im = imagecreate ( $new_w, $new_h );
			
				$bgcolor=ImageColorAllocate($dst_im,0,0,0);
				ImageColorTransparent($dst_im,$bgcolor);
				imagecopyresized ( $dst_im, $image, 0, 0, 0, 0, $new_w, $new_h, $im_w, $im_h );
				imagegif ( $dst_im );
				break;
		}
		imagedestroy ( $dst_im );
		imagedestroy ( $image );
	}
	
	/*
	 * 获取图像大小 @param string $im 图像元数据 @return array
	 */
	protected static function getsize($im) {
		return array (
				imagesx ( $im ),
				imagesy ( $im ) 
		);
	}
}

?>